{
  "Onix Microservice": {
    "prefix": "onix-microservice",
    "body": [
      "import { Application, MicroService } from '@onixjs/core';\n",
      "@MicroService({",
      "\thost: '${2:127.0.0.1}',",
      "\tport: ${3:8080},",
      "\tmodules: []",
      "})",
      "export class ${1}App extends Application {}"
    ],
    "description": "Onix App Class"
  },
  "Onix SOA": {
    "prefix": "onix-soa",
    "body": [
      "import { Application, SOAService } from '@onixjs/core';\n",
      "@SOAService({",
      "\thost: '${2:127.0.0.1}',",
      "\tport: ${3:8080},",
      "\tmodules: []",
      "})",
      "export class ${1}App extends Application {}"
    ],
    "description": "Onix App Class"
  },
  "Onix Boot": {
    "prefix": "onix-boot",
    "body": [
      "const config = require('../onix.config.json');",
      "import { HostBoot } from '@onixjs/core';\n",
      "// Create a new HostBoot instance for our OnixJS Config",
      "const boot: HostBoot = new HostBoot(config);",
      "// Run our OnixJS Context",
      "boot.run();\n"
    ],
    "description": "Onix Boot file."
  },
  "Onix Module": {
    "prefix": "onix-module",
    "body": [
      "import { Module, OnixMessage, ModelProvider, OnixMethod } from '@onixjs/core';\n",
      "@Module({",
      "\tmodels: [],",
      "\tservices: [],",
      "\trenderers: [],",
      "\tcomponents: [],",
      "\tlifecycle: async(",
      "\t\tmodels: ModelProvider,",
      "\t\tmessage: OnixMessage,",
      "\t\tmethod: OnixMethod",
      "\t) => {",
      "\t\t// before call",
      "\t\tconst result = await method();",
      "\t\t// before call",
      "\t\treturn result;",
      "\t},",
      "})",
      "export class ${1:My}Module {}\n"
    ],
    "description": "Onix Module."
  },
  "Onix Model": {
    "prefix": "onix-model",
    "body": [
      "import { Model, Property, IModel } from '@onixjs/core';\n",
      "@Model({ datasource: ${2:MyDatasourceClass} })",
      "export class ${1:My}Model implements IModel {\n",
      "\t@Property({",
      "\t\ttype: String,",
      "\t\trequired: true,",
      "\t\tunique: true,",
      "\t\tdropDups: true,",
      "\t}) text: String;",
      "}\n"
    ],
    "description": "Onix Model."
  },
  "Onix Datasource": {
    "prefix": "onix-datasource",
    "body": [
      "import { IDataSource, DataSource, Constructor } from '@onixjs/core';\n",
      "@DataSource()",
      "export class ${1:My}Datasource implements IDataSource {\n",
      "\tconnect(): Promise<${2:MyDatasource}> {",
      "\t\treturn;",
      "\t}\n",
      "\tdisconnect(): Promise<void> {",
      "\t\treturn;",
      "\t}\n",
      "\tregister(Class: Constructor, model: any, schema: any): any {",
      "\t}\n",
      "}\n"
    ],
    "description": "Onix Datasource."
  },
  "Onix Service": {
    "prefix": "onix-service",
    "body": [
      "import { Service } from '@onixjs/core';\n",
      "@Service()",
      "export class ${1}Service {\n",
      "}\n"
    ],
    "description": "Onix Service."
  },
  "Onix Component": {
    "prefix": "onix-component",
    "body": [
      "import { IComponent, Component, ModelProvider, OnixMessage, OnixMethod } from '@onixjs/core';\n",
      "@Component({",
      "\tlifecycle: async(",
      "\t\tmodels: ModelProvider,",
      "\t\tmessage: OnixMessage,",
      "\t\tmethod: OnixMethod",
      "\t) => {",
      "\t\t// before call",
      "\t\tconst result = await method();",
      "\t\t// before call",
      "\t\treturn result;",
      "\t},",
      "})",
      "export class ${1:My}Component implements IComponent {\n",
      "\tinit() {",
      "\t}\n",
      "\tdestroy() {",
      "\t}\n",
      "}\n"
    ],
    "description": "Onix Component."
  }
}