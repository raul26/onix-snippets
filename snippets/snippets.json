{
  "Onix Index": {
    "prefix": "onix-application",
    "body": [
      "import { Application, MicroService } from '@onixjs/core';\n",
      "@MicroService({",
      "\thost: '${2:127.0.0.1}',",
      "\tport: ${3:8080},",
      "\tmodules: []",
      "})",
      "export class ${1:Todo}App extends Application {}"
    ],
    "description": "Onix App Class"
  },
  "Onix Boot": {
    "prefix": "onix-boot",
    "body": [
      "const config = require('../onix.config.json');",
      "import { HostBoot } from '@onixjs/core';\n",
      "// Create a new HostBoot instance for our OnixJS Config",
      "const boot: HostBoot = new HostBoot(config);",
      "// Run our OnixJS Context",
      "boot.run();\n"
    ],
    "description": "Onix Boot file."
  },
  "Onix Module": {
    "prefix": "onix-module",
    "body": [
      "import { Module } from '@onixjs/core';",
      "import { ${1:Todo}Component } from './${2:Todo}.component';",
      "import { ${1:Todo}Model } from './${2:Todo}.model';",
      "import { ${1:Todo}Service } from './${2:Todo}.service';\n",
      "@Module({",
      "\tmodels: [${1:Todo}Model],",
      "\tservices: [${1:Todo}Service],",
      "\trenderes: [],",
      "\tcomponents: [${1:Todo}Component],",
      "\tlifecycle: async(appp, metadata, method): Promise<any> => {",
      "\t\t// before call",
      "\t\tconst result = await method();",
      "\t\t// before call",
      "\t},",
      "})",
      "export class ${1:Todo}Module {}\n"
    ],
    "description": "Onix Module."
  },
  "Onix Model": {
    "prefix": "onix-model",
    "body": [
      "import { Model, IModel, Property } from '@onixjs/core';",
      "import { ${1:Mongoose}Datasource } from './${2:mongoose}.datasource';\n",
      "@Model({",
      "\tdatasource: [${1:Mongoose}Datasource],",
      "})",
      "export class ${3:Todo}Model {\n",
      "\t_id?: string\n",
      "\t@Property({",
      "\t\ttype: String",
      "\t\trequired: true",
      "\t}) text: String;",
      "}\n"
    ],
    "description": "Onix Model."
  }
}